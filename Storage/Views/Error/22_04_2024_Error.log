[ 22/04/2024-15:40:11 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:40:11 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:40:11 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:40:11 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:40:11 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:40:11 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:40:12 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:40:12 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:41:33 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:41:33 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:41:33 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:41:33 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:41:33 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:41:33 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:41:34 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:41:34 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:27 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:27 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:27 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:27 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:27 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:27 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:27 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:27 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:48 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:48 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:48 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:48 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:48 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:48 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:48 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:48 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:50 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:50 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:50 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:50 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:50 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:50 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:50 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:50 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:54 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:54 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:54 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:54 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:54 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:54 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:55 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:55 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:42:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:42:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:43:46 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:43:46 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:43:46 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:43:46 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:43:46 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:43:46 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:43:46 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:43:46 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:43:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:43:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:43:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:43:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:43:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:43:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:43:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:43:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:44:12 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:44:12 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:44:12 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:44:12 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:44:12 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:44:12 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:44:13 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:44:13 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:44:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:44:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:45:09 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:45:09 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:45:37 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:45:37 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:45:37 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:45:37 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:47:49 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:47:49 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:47:49 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:47:49 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + current.children , { ...it, route:current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:49:09 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
JSON.stringify(current)
__eta.res+='\n'
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:49:09 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
JSON.stringify(current)
__eta.res+='\n'
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:49:09 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
JSON.stringify(current)
__eta.res+='\n'
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:49:09 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
JSON.stringify(current)
__eta.res+='\n'
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:49:58 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                ...route,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
JSON.stringify(current)
__eta.res+='\n'
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:49:58 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                ...route,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
JSON.stringify(current)
__eta.res+='\n'
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:49:58 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                ...route,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
JSON.stringify(current)
__eta.res+='\n'
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:49:58 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                ...route,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(current) {
__eta.res+='    '
JSON.stringify(current)
__eta.res+='\n'
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:50:29 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const Current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:50:29 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const Current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:50:29 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const Current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:50:29 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const Current = Router(it.req._parsedUrl);
__eta.res+='\n'
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:50:41 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:50:41 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:50:41 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:50:41 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null; // Retorna null se nenhuma rota corresponder
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:51:51 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected token 'const'
========================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

__eta.res+=/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:51:51 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected token 'const'
========================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

__eta.res+=/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:51:51 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected token 'const'
========================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

__eta.res+=/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:51:51 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected token 'const'
========================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

__eta.res+=/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    if (!path) return null;

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:52:36 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:52:36 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:52:36 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:52:36 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }

    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            return {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return null;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:53:40 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:53:40 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:53:40 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:53:40 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:53:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:53:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:53:59 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:53:59 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:54:22 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:54:22 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:54:22 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:54:22 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:54:23 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:54:23 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:54:23 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:54:23 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    let result
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result = {
                path: route.path,
                children: route.children,
                params: params
            };
        }
    }
    return result;
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:55:09 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    const result =[];
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result.push({
                path: route.path,
                children: route.children,
                params: params
            });
        }
    }
    return result[0];
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:55:09 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    const result =[];
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result.push({
                path: route.path,
                children: route.children,
                params: params
            });
        }
    }
    return result[0];
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:55:09 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    const result =[];
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result.push({
                path: route.path,
                children: route.children,
                params: params
            });
        }
    }
    return result[0];
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:55:09 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    const result =[];
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result.push({
                path: route.path,
                children: route.children,
                params: params
            });
        }
    }
    return result[0];
}

const Current = Router(it.req._parsedUrl);
if(Current) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:55:44 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    const result =[];
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result.push({
                path: route.path,
                children: route.children,
                params: params
            });
        }
    }
    return result[0];
}

const Current = Router(it.req._parsedUrl);
if(Current && Current?.children) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:55:44 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    const result =[];
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result.push({
                path: route.path,
                children: route.children,
                params: params
            });
        }
    }
    return result[0];
}

const Current = Router(it.req._parsedUrl);
if(Current && Current?.children) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-15:55:44 ] [ _.Views._ ] EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    const result =[];
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result.push({
                path: route.path,
                children: route.children,
                params: params
            });
        }
    }
    return result[0];
}

const Current = Router(it.req._parsedUrl);
if(Current && Current?.children) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
    at C:\Users\Drylian\Documents\GitHub\CorePanel\app\Http\StructuralHttp.ts:58:14
    at Layer.handle [as handle_request] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\layer.js:95:5)
    at next (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\express\lib\router\route.js:149:13)
[ 22/04/2024-15:55:44 ] [ _.Views._ ] Fatal:EtaParser Error: Bad template syntax

Unexpected identifier 'children'
================================

let include = (template, data) => this.render(template, data, options);
let includeAsync = (template, data) => this.renderAsync(template, data, options);

let __eta = {res: "", e: this.config.escapeFunction, f: this.config.filterFunction};

function layout(path, data) {
  __eta.layout = path;
  __eta.layoutData = data;
}

/**
 * Views Routes
 */
const Routes = [
    { path: "/", children: "Home.eta" },
];
function Router(url) {
    const path = url.pathname;
    if (!path) return null;
    if(it.error) {
        return {
            path,
            Error:it.error
            children: "Error.eta",
            params: {}
        };
    }
    const result =[];
    for (const route of Routes) {
        let regexPattern = '^' + route.path.replace(/:\w+/g, '([^\\/]+)') + '\\/?;
        const match = path.match(new RegExp(regexPattern));
        if (match || path === route.path) {
            const params = {};
            const keys = route.path.match(/:(\w+)/g) || []; 
            keys.forEach((key, index) => {
                params[key.substring(1)] = match ? match[index + 1] : undefined;
            });
            result.push({
                path: route.path,
                children: route.children,
                params: params
            });
        }
    }
    return result[0];
}

const Current = Router(it.req._parsedUrl);
if(Current && Current?.children) {
__eta.res+='    '
__eta.res+=await includeAsync("./" + Current.children , { ...it, route:Current })
} else {
__eta.res+='    '
__eta.res+=await includeAsync("./React.eta" , { ...it })
}

if (__eta.layout) {
  __eta.res = await includeAsync (__eta.layout, {...it, body: __eta.res, ...__eta.layoutData});
}

return __eta.res;


    at Eta.compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:36:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:22:31)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
[ 22/04/2024-16:00:16 ] [ _.Views._ ] EtaFileResolution Error: Could not find template: app\Resources\Views\SimulandoumErro.eta
    at Eta.readFile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\file-handling.ts:20:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:20:35)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:51:18)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:116:41)
[ 22/04/2024-16:00:16 ] [ _.Views._ ] Fatal:EtaFileResolution Error: Could not find template: app\Resources\Views\SimulandoumErro.eta
    at Eta.readFile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\file-handling.ts:20:13)
    at Eta.call (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:20:35)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:77:30)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:51:18)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at Etalization.send (C:\Users\Drylian\Documents\GitHub\CorePanel\app\Classes\Etalization.ts:123:45)
[ 22/04/2024-20:41:00 ] [ _.Views._ ] TypeError: Cannot read properties of undefined (reading 'user')
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:21:30)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:16:18)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
[ 22/04/2024-20:41:00 ] [ _.Views._ ] Fatal:TypeError: Cannot read properties of undefined (reading 'user')
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:21:30)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:16:18)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
[ 22/04/2024-20:42:21 ] [ _.Views._ ] TypeError: Cannot read properties of undefined (reading 'split')
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:26:39)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:14:18)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
[ 22/04/2024-20:42:21 ] [ _.Views._ ] Fatal:TypeError: Cannot read properties of undefined (reading 'split')
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:26:39)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:14:18)
    at Eta.call [as renderAsync] (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
    at Eta.renderAsync (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\render.ts:82:26)
    at includeAsync (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:5:45)
    at Eta.eval (eval at compile (C:\Users\Drylian\Documents\GitHub\CorePanel\node_modules\eta\src\compile.ts:29:12), <anonymous>:23:18)
